import sqlite3
import json
import os
from datetime import datetime

def json_to_sqlite(json_path, db_path, table_name='scimago'):
    """
    将 JSON 文件转换为 SQLite 数据库
    """
    # 读取 JSON 数据
    try:
        with open(json_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        # 确保数据是列表格式
        if not isinstance(data, list):
            data = [data]
    except Exception as e:
        print(f"读取 JSON 文件失败: {e}")
        return False

    # 连接到 SQLite 数据库
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    # 删除已存在的表（如果存在）
    cursor.execute(f"DROP TABLE IF EXISTS {table_name}")
    
    # 从第一条数据推断表结构
    if data:
        sample = data[0]
        columns = []
        
        # 自动推断列类型
        for key, value in sample.items():
            if isinstance(value, int):
                col_type = "INTEGER"
            elif isinstance(value, float):
                col_type = "REAL"
            elif isinstance(value, bool):
                col_type = "INTEGER"  # SQLite 没有布尔类型
            elif isinstance(value, (list, dict)):
                col_type = "TEXT"  # 存储为 JSON 字符串
            else:
                col_type = "TEXT"
            
            columns.append(f"{key} {col_type}")
        
        # 创建表
        create_table_sql = f"""
        CREATE TABLE IF NOT EXISTS {table_name} (
            {', '.join(columns)}
        )
        """
        cursor.execute(create_table_sql)
    
    # 插入数据
    inserted_count = 0
    for item in data:
        # 处理嵌套结构
        processed_item = {}
        for key, value in item.items():
            if isinstance(value, (list, dict)):
                # 将列表/字典转换为 JSON 字符串
                processed_item[key] = json.dumps(value)
            else:
                processed_item[key] = value
        
        # 构建插入语句
        columns = ', '.join(processed_item.keys())
        placeholders = ', '.join(['?'] * len(processed_item))
        values = tuple(processed_item.values())
        
        try:
            cursor.execute(
                f"INSERT INTO {table_name} ({columns}) VALUES ({placeholders})", 
                values
            )
            inserted_count += 1
        except sqlite3.Error as e:
            print(f"插入数据时出错: {e}")
            print(f"问题数据: {item}")
    
    # 提交并关闭连接
    conn.commit()
    conn.close()
    
    print(f"成功插入 {inserted_count}/{len(data)} 条记录")
    return True

def main():
    # 原始 JSON 文件路径
    json_path = r"G:/1申请文件/意大利/slide/Data Science/scimago.json"
    
    # 数据库文件路径（与 JSON 文件同目录）
    db_dir = os.path.dirname(json_path)
    db_filename = "scimago.db"
    db_path = os.path.join(db_dir, db_filename)
    
    # 转换并计时
    start_time = datetime.now()
    print(f"开始转换: {start_time.strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"源文件: {json_path}")
    print(f"目标数据库: {db_path}")
    
    success = json_to_sqlite(json_path, db_path)
    
    end_time = datetime.now()
    duration = end_time - start_time
    
    if success:
        print(f"转换完成! 耗时: {duration.total_seconds():.2f} 秒")
        print(f"数据库文件已保存至: {db_path}")
        
        # 验证数据库
        try:
            conn = sqlite3.connect(db_path)
            cursor = conn.cursor()
            
            # 获取表信息
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
            tables = cursor.fetchall()
            print(f"\n数据库包含 {len(tables)} 个表:")
            
            for table in tables:
                table_name = table[0]
                cursor.execute(f"PRAGMA table_info({table_name})")
                columns = cursor.fetchall()
                print(f"\n表: {table_name} ({len(columns)} 列)")
                
                # 显示前5行数据
                cursor.execute(f"SELECT * FROM {table_name} LIMIT 5")
                rows = cursor.fetchall()
                
                print("\n示例数据:")
                for row in rows:
                    print(row)
            
            conn.close()
        except Exception as e:
            print(f"数据库验证失败: {e}")
    else:
        print("转换失败，请检查错误信息")

if __name__ == "__main__":
    main()
